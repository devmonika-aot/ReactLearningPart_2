{"ast":null,"code":"import { createStore } from \"redux\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst countReducer = (state = initialState, action) => {\n  if (action.type === 'increment') {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'decrement') {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'increse') {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'toggle') {\n    return {\n      counter: state.counter,\n      showCounter: !state.showCounter\n    };\n  }\n  return state; // don't retun with {}, just state\n};\n// NOTES\":\n// We sould never do state.counter++ as we should never mutate current state,\n//Best practice is we should always override the prev state and retrun new state.\n\n// We always have to add all the field while returning new object, coz lets say if we retrn like below \n//  return { counter: state.counter} \n// then , the showCounter value will be undefined.\n\nconst store = createStore(countReducer); // ruducer which will updated the data\n\nexport default store;\n// First dispatch will executed and It will call reducer\n// the argument we are passing thorugh dispatch will go in second argument i.e action of the reducer method\n// once the value of state variable changed, It will call the subscrive method","map":{"version":3,"names":["createStore","initialState","counter","showCounter","countReducer","state","action","type","amount","store"],"sources":["C:/Users/HP/Downloads/React/ReactLearningPart_2/React-Redux/src/components/store/index.js"],"sourcesContent":["import {createStore} from \"redux\";\r\nconst initialState = { counter: 0 , showCounter:true}\r\nconst countReducer = (state = initialState, action) => {\r\n  if (action.type === 'increment') {\r\n    return { counter: state.counter + 1 , showCounter : state.showCounter};\r\n  }\r\n  if (action.type === 'decrement') {\r\n    return { counter: state.counter - 1 , showCounter : state.showCounter};\r\n  }\r\n  if (action.type === 'increse') {\r\n    return { counter: state.counter + action.amount , showCounter : state.showCounter};\r\n  }\r\n  if(action.type === 'toggle'){\r\n    return { counter: state.counter , showCounter : !state.showCounter};\r\n  }\r\n  return  state ; // don't retun with {}, just state\r\n};\r\n// NOTES\":\r\n// We sould never do state.counter++ as we should never mutate current state,\r\n//Best practice is we should always override the prev state and retrun new state.\r\n\r\n// We always have to add all the field while returning new object, coz lets say if we retrn like below \r\n//  return { counter: state.counter} \r\n// then , the showCounter value will be undefined.\r\n\r\nconst store = createStore(countReducer); // ruducer which will updated the data\r\n\r\nexport default store;\r\n// First dispatch will executed and It will call reducer\r\n// the argument we are passing thorugh dispatch will go in second argument i.e action of the reducer method\r\n// once the value of state variable changed, It will call the subscrive method\r\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AACjC,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAGC,WAAW,EAAC;AAAI,CAAC;AACrD,MAAMC,YAAY,GAAGA,CAACC,KAAK,GAAGJ,YAAY,EAAEK,MAAM,KAAK;EACrD,IAAIA,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MAAEL,OAAO,EAAEG,KAAK,CAACH,OAAO,GAAG,CAAC;MAAGC,WAAW,EAAGE,KAAK,CAACF;IAAW,CAAC;EACxE;EACA,IAAIG,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MAAEL,OAAO,EAAEG,KAAK,CAACH,OAAO,GAAG,CAAC;MAAGC,WAAW,EAAGE,KAAK,CAACF;IAAW,CAAC;EACxE;EACA,IAAIG,MAAM,CAACC,IAAI,KAAK,SAAS,EAAE;IAC7B,OAAO;MAAEL,OAAO,EAAEG,KAAK,CAACH,OAAO,GAAGI,MAAM,CAACE,MAAM;MAAGL,WAAW,EAAGE,KAAK,CAACF;IAAW,CAAC;EACpF;EACA,IAAGG,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAC;IAC1B,OAAO;MAAEL,OAAO,EAAEG,KAAK,CAACH,OAAO;MAAGC,WAAW,EAAG,CAACE,KAAK,CAACF;IAAW,CAAC;EACrE;EACA,OAAQE,KAAK,CAAE,CAAC;AAClB,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAMI,KAAK,GAAGT,WAAW,CAACI,YAAY,CAAC,CAAC,CAAC;;AAEzC,eAAeK,KAAK;AACpB;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}