{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n//We will create slice for each global state\n// If we have authentication data in Authentication.js componnet we will create slice for that as well.\n// Here , we have date with data counter and showCounter from Counter.js component as global state,\n// We will create slice .\n\nconst counterSlice = createSlice({\n  name: \"coucounter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    Toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: \"authentication\",\n  initialAuthState,\n  login(state) {\n    state.isAuthenticated = true;\n  },\n  logout(state) {\n    state.isAuthenticated = false;\n  }\n});\n// We won't use createStore as It can have only one reducer\n//const store = createStore(counterSlice.reducer);\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\n// here if we have more than one reducer in it then we can do like below:\n//const store = configureStore({\n//  reducer: {counter:counterSlice.reducer ,auth:authSlice.reducer})\n// });\n\n// counterSlice.actions is returning all the method define inside reducers as KEY. So method name KEY\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","Toggle","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions"],"sources":["C:/Users/HP/Downloads/React/ReactLearningPart_2/React-Redux-Toolkit/src/components/store/index.js"],"sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = { counter: 0, showCounter: true };\r\n\r\n//We will create slice for each global state\r\n// If we have authentication data in Authentication.js componnet we will create slice for that as well.\r\n// Here , we have date with data counter and showCounter from Counter.js component as global state,\r\n// We will create slice .\r\n\r\nconst counterSlice = createSlice({\r\n  name: \"coucounter\",\r\n  initialState,\r\n  reducers: {\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.payload;\r\n    },\r\n    Toggle(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\nconst initialAuthState = { isAuthenticated: false };\r\n\r\nconst authSlice = createSlice({\r\n  name: \"authentication\",\r\n  initialAuthState,\r\n  login(state) {\r\n    state.isAuthenticated = true;\r\n  },\r\n  logout(state) {\r\n    state.isAuthenticated = false;\r\n  },\r\n});\r\n// We won't use createStore as It can have only one reducer\r\n//const store = createStore(counterSlice.reducer);\r\nconst store = configureStore({\r\n  reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\r\n});\r\n// here if we have more than one reducer in it then we can do like below:\r\n//const store = configureStore({\r\n//  reducer: {counter:counterSlice.reducer ,auth:authSlice.reducer})\r\n// });\r\n\r\n// counterSlice.actions is returning all the method define inside reducers as KEY. So method name KEY\r\nexport const counterActions = counterSlice.actions;\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;;AAEtD;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/BM,IAAI,EAAE,YAAY;EAClBJ,YAAY;EACZK,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,MAAMA,CAACL,KAAK,EAAE;MACZA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAEF,MAAMW,gBAAgB,GAAG;EAAEC,eAAe,EAAE;AAAM,CAAC;AAEnD,MAAMC,SAAS,GAAGjB,WAAW,CAAC;EAC5BM,IAAI,EAAE,gBAAgB;EACtBS,gBAAgB;EAChBG,KAAKA,CAACT,KAAK,EAAE;IACXA,KAAK,CAACO,eAAe,GAAG,IAAI;EAC9B,CAAC;EACDG,MAAMA,CAACV,KAAK,EAAE;IACZA,KAAK,CAACO,eAAe,GAAG,KAAK;EAC/B;AACF,CAAC,CAAC;AACF;AACA;AACA,MAAMI,KAAK,GAAGnB,cAAc,CAAC;EAC3BoB,OAAO,EAAE;IAAElB,OAAO,EAAEE,YAAY,CAACgB,OAAO;IAAEC,IAAI,EAAEL,SAAS,CAACI;EAAQ;AACpE,CAAC,CAAC;AACF;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAME,cAAc,GAAGlB,YAAY,CAACmB,OAAO;AAClD,eAAeJ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}