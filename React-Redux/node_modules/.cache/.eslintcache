[{"C:\\Users\\HP\\Downloads\\React\\ReactLearningPart_2\\React-Redux\\src\\index.js":"1","C:\\Users\\HP\\Downloads\\React\\ReactLearningPart_2\\React-Redux\\src\\App.js":"2","C:\\Users\\HP\\Downloads\\React\\ReactLearningPart_2\\React-Redux\\src\\components\\Counter.js":"3","C:\\Users\\HP\\Downloads\\React\\ReactLearningPart_2\\React-Redux\\src\\components\\store\\index.js":"4"},{"size":326,"mtime":1695627982768,"results":"5","hashOfConfig":"6"},{"size":118,"mtime":1648643196000,"results":"7","hashOfConfig":"6"},{"size":1775,"mtime":1695706507107,"results":"8","hashOfConfig":"6"},{"size":1416,"mtime":1695706841174,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"79xyoe",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\HP\\Downloads\\React\\ReactLearningPart_2\\React-Redux\\src\\index.js",[],[],"C:\\Users\\HP\\Downloads\\React\\ReactLearningPart_2\\React-Redux\\src\\App.js",[],[],["25"],"C:\\Users\\HP\\Downloads\\React\\ReactLearningPart_2\\React-Redux\\src\\components\\Counter.js",["26"],[],"import classes from \"./Counter.module.css\";\nimport { UseSelector, useDispatch, useSelector } from \"react-redux\";\n\nconst Counter = () => {\n  // We use useSelector to extract data from store, this useSelector is ran by react when it loads.\n  // The reason we used useSelector instead of useStore is , When we use useSelector, It automatically\n  // subscribe to the store. So here, Counter components automatically subscribe to store, It will be called\n  // automatically if counter value in the store changes.\n  const counter = useSelector((state) => state.counter);\n  const showCounter = useSelector((state) => state.showCounter) // extracting showCounter as well, so that\n  //whenever value gets changed, It will re-execute the Counter.js component as It subscribe automatically\n  // This hooks is executed by react as well when it loads.\n\n // console.log(\"checking weather Counter component is getting called after each val updation in store\")\n  const dispatch = useDispatch();\n \n\n  const increase = () => {\n    dispatch({ type: \"increse\", amount:5 }); // passing payload while calling reducer\n  };\n  const incrementHandler = () => {\n    dispatch({ type: \"increment\" });\n  };\n  const decrementHandler = () => {\n    dispatch({ type: \"decrement\" });\n  };\n  const toggleCounterHandler = () => {\n    dispatch({ type: \"toggle\" });\n  };\n  \n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      {showCounter && <div className={classes.value}>{counter}</div>}\n      <button onClick={incrementHandler}>increment</button>\n      <button onClick={decrementHandler}>decrement</button>\n      <button onClick={increase}>increase by 5 </button>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n\nexport default Counter;\n",["27"],"C:\\Users\\HP\\Downloads\\React\\ReactLearningPart_2\\React-Redux\\src\\components\\store\\index.js",[],[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":2,"column":10,"nodeType":"32","messageId":"33","endLine":2,"endColumn":21},{"ruleId":"28","replacedBy":"34"},"no-new-object",["35"],"no-unused-vars","'UseSelector' is defined but never used.","Identifier","unusedVar",["35"],"no-object-constructor"]