{"ast":null,"code":"import { createStore } from \"redux\";\nstate = {\n  counter: 0,\n  showCounter: true\n};\nconst countReducer = (state, action) => {\n  if (action.type === 'increment') {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'decrement') {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'increse') {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'toggle') {\n    return {\n      counter: state.counter,\n      showCounter: !state.showCounter\n    };\n  }\n  return state; // don't retun with {}, just state\n};\n\nconst store = createStore(countReducer); // ruducer which will updated the data\n\nexport default store;\n// First dispatch will executed and It will call reducer\n// the argument we are passing thorugh dispatch will go in second argument i.e action of the reducer method\n// once the value of state variable changed, It will call the subscrive method","map":{"version":3,"names":["createStore","state","counter","showCounter","countReducer","action","type","amount","store"],"sources":["C:/Users/HP/Downloads/React/ReactLearningPart_2/React-Redux/src/components/store/index.js"],"sourcesContent":["import {createStore} from \"redux\";\r\nstate = { counter: 0 , showCounter:true}\r\nconst countReducer = (state, action) => {\r\n  if (action.type === 'increment') {\r\n    return { counter: state.counter + 1 , showCounter : state.showCounter};\r\n  }\r\n  if (action.type === 'decrement') {\r\n    return { counter: state.counter - 1 , showCounter : state.showCounter};\r\n  }\r\n  if (action.type === 'increse') {\r\n    return { counter: state.counter + action.amount , showCounter : state.showCounter};\r\n  }\r\n  if(action.type === 'toggle'){\r\n    return { counter: state.counter , showCounter : !state.showCounter};\r\n  }\r\n  return  state ; // don't retun with {}, just state\r\n};\r\n\r\nconst store = createStore(countReducer); // ruducer which will updated the data\r\n\r\nexport default store;\r\n// First dispatch will executed and It will call reducer\r\n// the argument we are passing thorugh dispatch will go in second argument i.e action of the reducer method\r\n// once the value of state variable changed, It will call the subscrive method\r\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AACjCC,KAAK,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAGC,WAAW,EAAC;AAAI,CAAC;AACxC,MAAMC,YAAY,GAAGA,CAACH,KAAK,EAAEI,MAAM,KAAK;EACtC,IAAIA,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MAAEJ,OAAO,EAAED,KAAK,CAACC,OAAO,GAAG,CAAC;MAAGC,WAAW,EAAGF,KAAK,CAACE;IAAW,CAAC;EACxE;EACA,IAAIE,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MAAEJ,OAAO,EAAED,KAAK,CAACC,OAAO,GAAG,CAAC;MAAGC,WAAW,EAAGF,KAAK,CAACE;IAAW,CAAC;EACxE;EACA,IAAIE,MAAM,CAACC,IAAI,KAAK,SAAS,EAAE;IAC7B,OAAO;MAAEJ,OAAO,EAAED,KAAK,CAACC,OAAO,GAAGG,MAAM,CAACE,MAAM;MAAGJ,WAAW,EAAGF,KAAK,CAACE;IAAW,CAAC;EACpF;EACA,IAAGE,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAC;IAC1B,OAAO;MAAEJ,OAAO,EAAED,KAAK,CAACC,OAAO;MAAGC,WAAW,EAAG,CAACF,KAAK,CAACE;IAAW,CAAC;EACrE;EACA,OAAQF,KAAK,CAAE,CAAC;AAClB,CAAC;;AAED,MAAMO,KAAK,GAAGR,WAAW,CAACI,YAAY,CAAC,CAAC,CAAC;;AAEzC,eAAeI,KAAK;AACpB;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}